import os
import json
import asyncio
from datetime import datetime, date

from telegram import (
    Update, Bot, ReplyKeyboardMarkup, ReplyKeyboardRemove,
    InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from utils_db import (
    get_pool, ensure_tables, fetch_license,
    upsert_license, licenses_expiring
)

# === –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
ALLOWED_USER_IDS = [5826122049, 6887361815]

# === –î–∞–Ω—ñ –º–∞–≥–∞–∑–∏–Ω—ñ–≤ —ñ –∫—ñ–æ—Å–∫—ñ–≤ ===
with open("store_ids_shops.json", "r", encoding="utf-8") as f:
    STORE_SHOPS = json.load(f)
with open("store_ids_kiosks.json", "r", encoding="utf-8") as f:
    STORE_KIOSKS = json.load(f)

user_states = {}

main_keyboard = ReplyKeyboardMarkup([
    ["üç∑ –ê–ª–∫–æ–≥–æ–ª—å", "üö¨ –¢—é—Ç—é–Ω"]
], resize_keyboard=True, one_time_keyboard=True)

group_keyboard = ReplyKeyboardMarkup([
    ["üè™ –ú–∞–≥–∞–∑–∏–Ω–∏", "üö¨ –ö—ñ–æ—Å–∫–∏"]
], resize_keyboard=True, one_time_keyboard=True)

# === –û–±—Ä–æ–±–Ω–∏–∫–∏ Telegram ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return
    user_states[chat_id] = {"step": "choose_type"}
    await update.message.reply_text("üç∑ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ª—ñ—Ü–µ–Ω–∑—ñ—ó:", reply_markup=main_keyboard)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text.strip()
    state = user_states.get(chat_id)

    if chat_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return

    if not state:
        return await start(update, context)

    if state["step"] == "choose_type":
        if text not in ["üç∑ –ê–ª–∫–æ–≥–æ–ª—å", "üö¨ –¢—é—Ç—é–Ω"]:
            return await update.message.reply_text("‚ùå –í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫.", reply_markup=main_keyboard)
        state["license_type"] = "alcohol" if text == "üç∑ –ê–ª–∫–æ–≥–æ–ª—å" else "tobacco"
        state["step"] = "choose_group"
        return await update.message.reply_text("üè™ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–æ—Ä–≥–æ–≤–æ—ó —Ç–æ—á–∫–∏:", reply_markup=group_keyboard)

    if state["step"] == "choose_group":
        if text not in ["üè™ –ú–∞–≥–∞–∑–∏–Ω–∏", "üö¨ –ö—ñ–æ—Å–∫–∏"]:
            return await update.message.reply_text("‚ùå –í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫.", reply_markup=group_keyboard)
        state["group"] = "shop" if text == "üè™ –ú–∞–≥–∞–∑–∏–Ω–∏" else "kiosk"
        stores = STORE_SHOPS if state["group"] == "shop" else STORE_KIOSKS
        state["stores"] = stores
        state["step"] = "choose_store"

        msg = "–°–ø–∏—Å–æ–∫ —Ç–æ—á–æ–∫:\n"
        for sid, addr in stores.items():
            msg += f"{sid}. {addr}\n"
        await update.message.reply_text(msg)
        return await update.message.reply_text("üî¢ –í–≤–µ–¥—ñ—Ç—å —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ—ó —Ç–æ—á–∫–∏:")

    if state["step"] == "choose_store":
        store_id = text.strip()
        if store_id not in state["stores"]:
            return await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        state["store_id"] = store_id

        row = await fetch_license(state["group"], store_id, state["license_type"])
        if row:
            date_start = row["start_date"].strftime("%d.%m.%Y")
            date_end = row["end_date"].strftime("%d.%m.%Y")
            days_left = (row["end_date"] - date.today()).days

            msg = (f"üìÑ –õ—ñ—Ü–µ–Ω–∑—ñ—è:\n"
                   f"–ü–æ—á–∞—Ç–æ–∫: {date_start}\n"
                   f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {date_end}\n"
                   f"‚è≥ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {days_left} –¥–Ω—ñ–≤")

            buttons = [[InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –¥–∞—Ç–∏", callback_data="update_dates")]]
            reply_markup = InlineKeyboardMarkup(buttons)

            await update.message.reply_text(msg, reply_markup=reply_markup)
            user_states.pop(chat_id, None)
        else:
            state["step"] = "enter_date_start"
            await update.message.reply_text("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É –ª—ñ—Ü–µ–Ω–∑—ñ—ó (–î–î.–ú–ú.–†–†–†–†):")

    elif state["step"] == "enter_date_start":
        try:
            datetime.strptime(text, "%d.%m.%Y")
            state["date_start"] = text
            state["step"] = "enter_date_end"
            await update.message.reply_text("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó (–î–î.–ú–ú.–†–†–†–†):")
        except:
            await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –î–î.–ú–ú.–†–†–†–†")

    elif state["step"] == "enter_date_end":
        try:
            date_start = datetime.strptime(state["date_start"], "%d.%m.%Y").date()
            date_end = datetime.strptime(text, "%d.%m.%Y").date()
            await upsert_license(state["group"], state["store_id"], state["license_type"], date_start, date_end)
            await update.message.reply_text("‚úÖ –î–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!", reply_markup=ReplyKeyboardRemove())
            user_states.pop(chat_id, None)
        except:
            await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –î–î.–ú–ú.–†–†–†–†")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id

    if query.data == "update_dates":
        user_states[chat_id] = {
            "step": "enter_date_start",
            "group": None,
            "store_id": None,
            "license_type": None
        }
        await query.message.reply_text("üìÖ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É –ª—ñ—Ü–µ–Ω–∑—ñ—ó (–î–î.–ú–ú.–†–†–†–†):")

# === –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ===

async def reminder_check():
    rows = await licenses_expiring(3)
    bot = Bot(BOT_TOKEN)

    for r in rows:
        stores = STORE_SHOPS if r["group_type"] == "shop" else STORE_KIOSKS
        name = stores.get(r["store_id"], f"ID {r['store_id']}")
        msg = (f"‚è∞ –ß–µ—Ä–µ–∑ 3 –¥–Ω—ñ –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è –ª—ñ—Ü–µ–Ω–∑—ñ—è –Ω–∞ {'–∞–ª–∫–æ–≥–æ–ª—å' if r['license_type'] == 'alcohol' else '—Ç—é—Ç—é–Ω'}!\n"
               f"üè™ {name}\n"
               f"–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {r['end_date'].strftime('%d.%m.%Y')}")
        for uid in ALLOWED_USER_IDS:
            await bot.send_message(uid, msg)

# === –°—Ç–∞—Ä—Ç —Å–∏—Å—Ç–µ–º–∏ ===

if __name__ == "__main__":
    async def run():
        await ensure_tables()

        app = Application.builder().token(BOT_TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        app.add_handler(CallbackQueryHandler(handle_callback))

        scheduler = AsyncIOScheduler()
        scheduler.add_job(reminder_check, "interval", hours=12)
        scheduler.start()

        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
        await app.run_polling()

    asyncio.run(run())
