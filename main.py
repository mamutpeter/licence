import os
import json
import psycopg2
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
)

# === –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
DB_URL = os.getenv("DATABASE_URL")
ALLOWED_USER_IDS = [5826122049, 6887361815]

STORE_KIOSKS_FILE = "store_ids_kiosks.json"
STORE_SHOPS_FILE = "store_ids_shops.json"

user_states = {}

main_keyboard = ReplyKeyboardMarkup([
    ["üç∑ –ê–ª–∫–æ–≥–æ–ª—å", "üö¨ –¢—é—Ç—é–Ω"]
], resize_keyboard=True, one_time_keyboard=True)

group_keyboard = ReplyKeyboardMarkup([
    ["üè™ –ú–∞–≥–∞–∑–∏–Ω–∏", "üö¨ –ö—ñ–æ—Å–∫–∏"]
], resize_keyboard=True, one_time_keyboard=True)

def get_conn():
    return psycopg2.connect(DB_URL)

def load_store_group(file):
    with open(file, "r", encoding="utf-8") as f:
        return json.load(f)

def get_license(key):
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT start_date, end_date FROM licenses WHERE key=%s", (key,))
            row = cur.fetchone()
            if row:
                return {'start_date': datetime.strptime(row[0], "%Y-%m-%d").date(),
                        'end_date': datetime.strptime(row[1], "%Y-%m-%d").date()}
    return None

def save_license(key, start, end):
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO licenses(key, start_date, end_date)
                VALUES (%s, %s, %s)
                ON CONFLICT (key) DO UPDATE SET start_date=%s, end_date=%s
            """, (key, start, end, start, end))
            conn.commit()

def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in ALLOWED_USER_IDS:
        update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return
    user_states[chat_id] = {"step": "choose_type"}
    update.message.reply_text("üç∑ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ª—ñ—Ü–µ–Ω–∑—ñ—ó:", reply_markup=main_keyboard)

def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text.strip()
    state = user_states.get(chat_id)
    if chat_id not in ALLOWED_USER_IDS:
        return
    if not state:
        start(update, context)
        return

    if state["step"] == "choose_type":
        if text not in ["üç∑ –ê–ª–∫–æ–≥–æ–ª—å", "üö¨ –¢—é—Ç—é–Ω"]:
            update.message.reply_text("‚ùå –í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫.", reply_markup=main_keyboard)
            return
        state["license_type"] = "alcohol" if text == "üç∑ –ê–ª–∫–æ–≥–æ–ª—å" else "tobacco"
        state["step"] = "choose_group"
        update.message.reply_text("üè™ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–æ—Ä–≥–æ–≤–æ—ó —Ç–æ—á–∫–∏:", reply_markup=group_keyboard)
        return

    if state["step"] == "choose_group":
        if text not in ["üè™ –ú–∞–≥–∞–∑–∏–Ω–∏", "üö¨ –ö—ñ–æ—Å–∫–∏"]:
            update.message.reply_text("‚ùå –í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫.", reply_markup=group_keyboard)
            return
        state["group"] = "shop" if text == "üè™ –ú–∞–≥–∞–∑–∏–Ω–∏" else "kiosk"
        group_file = STORE_SHOPS_FILE if state["group"] == "shop" else STORE_KIOSKS_FILE
        stores = load_store_group(group_file)
        state["stores"] = stores
        state["step"] = "choose_store"
        msg = "–°–ø–∏—Å–æ–∫ —Ç–æ—á–æ–∫:\n" + "\n".join([f"{k}. {v}" for k, v in stores.items()])
        update.message.reply_text(msg)
        update.message.reply_text("üî¢ –í–≤–µ–¥—ñ—Ç—å —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ—ó —Ç–æ—á–∫–∏:")
        return

    if state["step"] == "choose_store":
        store_id = text.strip()
        if store_id not in state["stores"]:
            update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return
        state["store_id"] = store_id
        key = f"{state['group']}_{store_id}_{state['license_type']}"
        license_data = get_license(key)
        if license_data:
            date_start = license_data['start_date']
            date_end = license_data['end_date']
            days_left = (date_end - datetime.now().date()).days
            msg = (f"üìÑ –õ—ñ—Ü–µ–Ω–∑—ñ—è:\n"
                   f"–ü–æ—á–∞—Ç–æ–∫: {date_start.strftime('%d.%m.%Y')}\n"
                   f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {date_end.strftime('%d.%m.%Y')}\n"
                   f"‚è≥ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {days_left} –¥–Ω—ñ–≤")
            buttons = [[InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –¥–∞—Ç–∏", callback_data="update_dates")]]
            reply_markup = InlineKeyboardMarkup(buttons)
            update.message.reply_text(msg, reply_markup=reply_markup)
            user_states.pop(chat_id, None)
            return
        else:
            state["step"] = "enter_date_start"
            update.message.reply_text("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É –ª—ñ—Ü–µ–Ω–∑—ñ—ó (–î–î.–ú–ú.–†–†–†–†):")
            return

    if state["step"] == "enter_date_start":
        try:
            date_start = datetime.strptime(text, "%d.%m.%Y").date()
            state["date_start"] = date_start
            state["step"] = "enter_date_end"
            update.message.reply_text("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó (–î–î.–ú–ú.–†–†–†–†):")
        except:
            update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –î–î.–ú–ú.–†–†–†–†")
        return

    if state["step"] == "enter_date_end":
        try:
            date_end = datetime.strptime(text, "%d.%m.%Y").date()
            key = f"{state['group']}_{state['store_id']}_{state['license_type']}"
            save_license(key, state["date_start"], date_end)
            update.message.reply_text("‚úÖ –î–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!", reply_markup=ReplyKeyboardRemove())
            user_states.pop(chat_id, None)
        except:
            update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –î–î.–ú–ú.–†–†–†–†")
        return

def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    user_states[chat_id] = {"step": "enter_date_start"}
    query.message.reply_text("üìÖ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É –ª—ñ—Ü–µ–Ω–∑—ñ—ó (–î–î.–ú–ú.–†–†–†–†):")

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_callback))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    app.run_polling()

if __name__ == "__main__":
    main()
