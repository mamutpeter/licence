import os
import json
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from docx import Document
from apscheduler.schedulers.background import BackgroundScheduler
import asyncio

BOT_TOKEN = "7685520910:AAH5Yx8uhW0Ry3ozQjsMjNPGlMBUadkfTno"
ALLOWED_USER_ID = 5826122049
TEMPLATE_FILE = "template_zayava.docx"
OUTPUT_DOCX = "zayava_ready.docx"
LICENSE_DATE_FILE = "license_date.json"

user_states = {}
store_context = {}

keyboard = ReplyKeyboardMarkup(
    [["‚ûï –î–æ–¥–∞—Ç–∏ –æ–ø–ª–∞—Ç—É", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏"]],
    resize_keyboard=True,
    one_time_keyboard=True
)

start_keyboard = ReplyKeyboardMarkup(
    [["üìò –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å", "üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω—ñ–≤"]],
    resize_keyboard=True,
    one_time_keyboard=True
)

instruction_text = """
üìò –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º:

1. –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É 'üìò –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å' –∞–±–æ –≤–≤–µ–¥–∏ /start <ID>
2. –í–≤–µ–¥–∏ –ø–æ —á–µ—Ä–∑—ñ:
   ‚Äì –ö–æ–¥ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–æ—Ö–æ–¥—É
   ‚Äì –°—É–º—É
   ‚Äì –ù–æ–º–µ—Ä —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
   ‚Äì –î–∞—Ç—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
3. –ù–∞—Ç–∏—Å–Ω–∏ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏'
4. –í–≤–µ–¥–∏ –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó
5. –ë–æ—Ç –∑–≥–µ–Ω–µ—Ä—É—î –∑–∞—è–≤—É —ñ –Ω–∞–≥–∞–¥–∞—î –∑–∞ 3 –¥–Ω—ñ
"""

def generate_docx(payments):
    doc = Document(TEMPLATE_FILE)
    target_table = None
    for table in doc.tables:
        if "9.1. –∫–æ–¥ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤ –±—é–¥–∂–µ—Ç—É:" in table.cell(0, 0).text:
            target_table = table
            break
    if target_table:
        for row in target_table.rows[1:]:
            row._element.getparent().remove(row._element)

        for p in payments:
            row = target_table.add_row()
            row.cells[0].text = p["code"]
            row.cells[1].text = p["amount"]
            row.cells[2].text = p["instr_number"]
            row.cells[3].text = p["instr_date"]

        os.makedirs("pdfs", exist_ok=True)
        path = os.path.join("pdfs", OUTPUT_DOCX)
        doc.save(path)
        return path
    return None

def save_license_date(date_str, chat_id):
    with open(LICENSE_DATE_FILE, "w") as f:
        json.dump({"license_end": date_str, "chat_id": chat_id}, f)

def load_license_date():
    if not os.path.exists(LICENSE_DATE_FILE):
        return None
    with open(LICENSE_DATE_FILE, "r") as f:
        return json.load(f)

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    args = ctx.args

    if not args:
        await update.message.reply_text(
            """üëã –í—ñ—Ç–∞—é! –©–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É:
–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É üìò –∞–±–æ –≤–≤–µ–¥–∏ /start <ID_–º–∞–≥–∞–∑–∏–Ω—É>

–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /start 1""",
            reply_markup=start_keyboard
        )
        return

    store_id = args[0]
    store_context[chat_id] = store_id
    user_states[chat_id] = {"step": 1, "data": {"payments": []}}
    await update.message.reply_text(f"üßæ –ú–∞–≥–∞–∑–∏–Ω {store_id} –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤ –±—é–¥–∂–µ—Ç—É:")

async def handle_input(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text.strip()

    if text == "üìò –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å":
        return await update.message.reply_text(instruction_text)
    elif text == "üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω—ñ–≤":
        return await update.message.reply_document(document=open("—Å–ø–∏—Å–æ–∫_–º–∞–≥–∞–∑–∏–Ω—ñ–≤.pdf", "rb"))

    if chat_id not in user_states:
        return await update.message.reply_text("‚ö†Ô∏è –ü–æ—á–Ω—ñ—Ç—å –∑ /start.")

    state = user_states[chat_id]

    if state["step"] == 6:
        if text == "‚ûï –î–æ–¥–∞—Ç–∏ –æ–ø–ª–∞—Ç—É":
            state["step"] = 1
            return await update.message.reply_text("üì• –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤ –±—é–¥–∂–µ—Ç—É:", reply_markup=ReplyKeyboardRemove())
        elif text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏":
            await update.message.reply_text("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†:")
            state["step"] = 7
            return
        else:
            return await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–Ω–æ–ø–∫—É:", reply_markup=keyboard)

    if state["step"] == 7:
        try:
            datetime.strptime(text, "%d.%m.%Y")
            save_license_date(text, chat_id)
            path = generate_docx(state["data"]["payments"])
            if path:
                await update.message.reply_document(open(path, "rb"), reply_markup=ReplyKeyboardRemove())
                await update.message.reply_text("‚úÖ –ó–∞—è–≤—É —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–∞—Ç—É –ª—ñ—Ü–µ–Ω–∑—ñ—ó!")
            else:
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†")
            return
        user_states.pop(chat_id)
        return

    if state["step"] == 1:
        state["current"] = {"code": text}
        state["step"] = 2
        return await update.message.reply_text("üì• –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É:")
    if state["step"] == 2:
        state["current"]["amount"] = text
        state["step"] = 3
        return await update.message.reply_text("üì• –í–≤–µ–¥—ñ—Ç—å ‚Ññ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:")
    if state["step"] == 3:
        state["current"]["instr_number"] = text
        state["step"] = 4
        return await update.message.reply_text("üì• –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:")
    if state["step"] == 4:
        state["current"]["instr_date"] = text
        state["data"]["payments"].append(state["current"])
        state["step"] = 6
        return await update.message.reply_text("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ –æ–¥–Ω—É –æ–ø–ª–∞—Ç—É —á–∏ ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏?", reply_markup=keyboard)

def reminder_check():
    data = load_license_date()
    if not data:
        return
    try:
        license_end = datetime.strptime(data["license_end"], "%d.%m.%Y")
        notify_date = license_end - timedelta(days=3)
        today = datetime.now().date()
        if today == notify_date.date():
            from telegram import Bot
            async def send_notification():
                bot = Bot(BOT_TOKEN)
                await bot.send_message(
                    chat_id=data["chat_id"],
                    text=f"‚è∞ –ß–µ—Ä–µ–∑ 3 –¥–Ω—ñ –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è –¥—ñ—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó ({data['license_end']})! –í–∏–∫–æ–Ω–∞–π /start"
                )
            asyncio.run(send_notification())
    except Exception as e:
        print("‚ùå –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –ø–æ–º–∏–ª–∫–∞:", e)

if __name__ == "__main__":
    print("üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram-–±–æ—Ç–∞...")
    try:
        app = ApplicationBuilder().token(BOT_TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input))

        scheduler = BackgroundScheduler()
        scheduler.add_job(reminder_check, "interval", hours=12)
        scheduler.start()

        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—é –∫–æ–º–∞–Ω–¥–∏...")
        app.run_polling()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
