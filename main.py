import os
import json
import asyncio
from datetime import datetime, timedelta
from flask import Flask, request
from telegram import Update, Bot, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from docx import Document
from apscheduler.schedulers.background import BackgroundScheduler

BOT_TOKEN = "7685520910:AAH5Yx8uhW0Ry3ozQjsMjNPGlMBUadkfTno"
WEBHOOK_URL = "https://dochelp-ctqw.onrender.com"
PORT = int(os.environ.get("PORT", 10000))

LICENSE_DATE_FILE = "license_date.json"
TEMPLATE_FILE = "template_zayava.docx"
OUTPUT_DOCX = "zayava_ready.docx"
ALLOWED_USER_IDS = [5826122049, 6887361815]

user_states = {}

keyboard = ReplyKeyboardMarkup([["‚ûï –î–æ–¥–∞—Ç–∏ –æ–ø–ª–∞—Ç—É", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏"]],
                               resize_keyboard=True, one_time_keyboard=True)

def load_license_data():
    if os.path.exists(LICENSE_DATE_FILE):
        with open(LICENSE_DATE_FILE, "r") as f:
            return json.load(f)
    return {}

def save_license_data(data):
    with open(LICENSE_DATE_FILE, "w") as f:
        json.dump(data, f, indent=2)

def generate_docx(payments):
    doc = Document(TEMPLATE_FILE)
    target_table = next((t for t in doc.tables if "9.1." in t.cell(0, 0).text), None)
    if target_table:
        for row in target_table.rows[1:]:
            row._element.getparent().remove(row._element)
        for p in payments:
            row = target_table.add_row()
            row.cells[0].text = p["code"]
            row.cells[1].text = p["amount"]
            row.cells[2].text = p["instr_number"]
            row.cells[3].text = p["instr_date"]
        os.makedirs("pdfs", exist_ok=True)
        path = os.path.join("pdfs", OUTPUT_DOCX)
        doc.save(path)
        return path
    return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in ALLOWED_USER_IDS:
        return await update.message.reply_text("‚õîÔ∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")

    user_states[chat_id] = {"step": 1, "data": {"payments": []}}
    await update.message.reply_text("üì• –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤ –±—é–¥–∂–µ—Ç—É:", reply_markup=ReplyKeyboardRemove())

async def handle_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in user_states:
        return await update.message.reply_text("‚ö†Ô∏è –ü–æ—á–Ω—ñ—Ç—å –∑ /start")

    text = update.message.text.strip()
    state = user_states[chat_id]

    if state["step"] == 1:
        state["current"] = {"code": text}
        state["step"] = 2
        await update.message.reply_text("üì• –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É:")
    elif state["step"] == 2:
        state["current"]["amount"] = text
        state["step"] = 3
        await update.message.reply_text("üì• –í–≤–µ–¥—ñ—Ç—å ‚Ññ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:")
    elif state["step"] == 3:
        state["current"]["instr_number"] = text
        state["step"] = 4
        await update.message.reply_text("üì• –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:")
    elif state["step"] == 4:
        state["current"]["instr_date"] = text
        state["data"]["payments"].append(state["current"])
        state["step"] = 5
        await update.message.reply_text("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ –æ–¥–Ω—É –æ–ø–ª–∞—Ç—É —á–∏ ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏?", reply_markup=keyboard)
    elif state["step"] == 5:
        if text == "‚ûï –î–æ–¥–∞—Ç–∏ –æ–ø–ª–∞—Ç—É":
            state["step"] = 1
            await update.message.reply_text("üì• –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤ –±—é–¥–∂–µ—Ç—É:", reply_markup=ReplyKeyboardRemove())
        elif text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏":
            state["step"] = 6
            await update.message.reply_text("üè™ –í–≤–µ–¥—ñ—Ç—å ID –º–∞–≥–∞–∑–∏–Ω—É:")
    elif state["step"] == 6:
        state["store_id"] = text
        state["step"] = 7
        await update.message.reply_text("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó (–î–î.–ú–ú.–†–†–†–†):")
    elif state["step"] == 7:
        try:
            datetime.strptime(text, "%d.%m.%Y")
            data = load_license_data()
            data[state["store_id"]] = text
            save_license_data(data)
            path = generate_docx(state["data"]["payments"])
            if path:
                await update.message.reply_document(open(path, "rb"))
                await update.message.reply_text("‚úÖ –ó–∞—è–≤—É —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ!")
            else:
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
        except:
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –¥–∞—Ç–∞. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†.")
        user_states.pop(chat_id, None)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_license_data()
    if not data:
        return await update.message.reply_text("‚ÑπÔ∏è –î–∞–Ω—ñ –ø—Ä–æ –ª—ñ—Ü–µ–Ω–∑—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    today = datetime.today()
    msg = "üìã –°—Ç–∞–Ω –ª—ñ—Ü–µ–Ω–∑—ñ–π:\n"
    for store_id, date_str in data.items():
        try:
            end_date = datetime.strptime(date_str, "%d.%m.%Y")
            days = (end_date - today).days
            msg += f"üè™ –ú–∞–≥–∞–∑–∏–Ω {store_id}: {date_str} ({days} –¥–Ω.)\n"
        except:
            continue
    await update.message.reply_text(msg)

def reminder_check():
    data = load_license_data()
    today = datetime.today().date()
    for store_id, date_str in data.items():
        try:
            end = datetime.strptime(date_str, "%d.%m.%Y").date()
            if end - timedelta(days=3) == today:
                async def send_notification():
                    bot = Bot(BOT_TOKEN)
                    for uid in ALLOWED_USER_IDS:
                        await bot.send_message(uid, f"‚è∞ –ß–µ—Ä–µ–∑ 3 –¥–Ω—ñ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –ª—ñ—Ü–µ–Ω–∑—ñ—è –º–∞–≥–∞–∑–∏–Ω—É {store_id} ({date_str})!")
                asyncio.run(send_notification())
        except:
            continue

# === Flask + Telegram app
app = Flask(__name__)
tg_app = Application.builder().token(BOT_TOKEN).build()
tg_app.add_handler(CommandHandler("start", start))
tg_app.add_handler(CommandHandler("status", status))
tg_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input))

scheduler = BackgroundScheduler()
scheduler.add_job(reminder_check, "interval", hours=12)
scheduler.start()

@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json(force=True)
    update = Update.de_json(data, tg_app.bot)
    asyncio.get_event_loop().run_until_complete(tg_app.process_update(update))
    return "ok"

if __name__ == "__main__":
    print("üîÑ –°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞...")
    asyncio.get_event_loop().run_until_complete(Bot(BOT_TOKEN).set_webhook(f"{WEBHOOK_URL}/webhook"))
    asyncio.get_event_loop().run_until_complete(tg_app.initialize())
    asyncio.get_event_loop().create_task(tg_app.start())
    app.run(host="0.0.0.0", port=PORT)
