import os
import json
import asyncio
from datetime import datetime, timedelta
import asyncpg
from telegram import Update, Bot, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# === –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
DB_URL = os.getenv("DATABASE_URL")
ALLOWED_USER_IDS = [5826122049, 6887361815]

STORE_KIOSKS_FILE = "store_ids_kiosks.json"
STORE_SHOPS_FILE = "store_ids_shops.json"

user_states = {}

main_keyboard = ReplyKeyboardMarkup([
    ["üç∑ –ê–ª–∫–æ–≥–æ–ª—å", "üö¨ –¢—é—Ç—é–Ω"]
], resize_keyboard=True, one_time_keyboard=True)

group_keyboard = ReplyKeyboardMarkup([
    ["üè™ –ú–∞–≥–∞–∑–∏–Ω–∏", "üö¨ –ö—ñ–æ—Å–∫–∏"]
], resize_keyboard=True, one_time_keyboard=True)

# === –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ===

async def get_pool():
    return await asyncpg.create_pool(DB_URL)

async def load_store_group(file):
    with open(file, "r", encoding="utf-8") as f:
        return json.load(f)

async def get_license(pool, key):
    async with pool.acquire() as conn:
        row = await conn.fetchrow("SELECT start_date, end_date FROM licenses WHERE key=$1", key)
        return dict(row) if row else None

async def save_license(pool, key, start, end):
    async with pool.acquire() as conn:
        await conn.execute("""
            INSERT INTO licenses(key, start_date, end_date)
            VALUES ($1, $2, $3)
            ON CONFLICT (key) DO UPDATE SET start_date=$2, end_date=$3
        """, key, start, end)

# === Telegram Handlers ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return
    user_states[chat_id] = {"step": "choose_type"}
    await update.message.reply_text("üç∑ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ª—ñ—Ü–µ–Ω–∑—ñ—ó:", reply_markup=main_keyboard)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text.strip()
    state = user_states.get(chat_id)
    if chat_id not in ALLOWED_USER_IDS:
        return
    if not state:
        return await start(update, context)

    pool = context.bot_data["pool"]

    if state["step"] == "choose_type":
        if text not in ["üç∑ –ê–ª–∫–æ–≥–æ–ª—å", "üö¨ –¢—é—Ç—é–Ω"]:
            return await update.message.reply_text("‚ùå –í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫.", reply_markup=main_keyboard)
        state["license_type"] = "alcohol" if text == "üç∑ –ê–ª–∫–æ–≥–æ–ª—å" else "tobacco"
        state["step"] = "choose_group"
        return await update.message.reply_text("üè™ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–æ—Ä–≥–æ–≤–æ—ó —Ç–æ—á–∫–∏:", reply_markup=group_keyboard)

    if state["step"] == "choose_group":
        if text not in ["üè™ –ú–∞–≥–∞–∑–∏–Ω–∏", "üö¨ –ö—ñ–æ—Å–∫–∏"]:
            return await update.message.reply_text("‚ùå –í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫.", reply_markup=group_keyboard)
        state["group"] = "shop" if text == "üè™ –ú–∞–≥–∞–∑–∏–Ω–∏" else "kiosk"
        group_file = STORE_SHOPS_FILE if state["group"] == "shop" else STORE_KIOSKS_FILE
        stores = await load_store_group(group_file)
        state["stores"] = stores
        state["step"] = "choose_store"
        msg = "–°–ø–∏—Å–æ–∫ —Ç–æ—á–æ–∫:\n" + "\n".join([f"{k}. {v}" for k, v in stores.items()])
        await update.message.reply_text(msg)
        return await update.message.reply_text("üî¢ –í–≤–µ–¥—ñ—Ç—å —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ—ó —Ç–æ—á–∫–∏:")

    if state["step"] == "choose_store":
        store_id = text.strip()
        if store_id not in state["stores"]:
            return await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        state["store_id"] = store_id

        key = f"{state['group']}_{store_id}_{state['license_type']}"
        license_data = await get_license(pool, key)

        if license_data:
            date_start = license_data['start_date']
            date_end = license_data['end_date']
            days_left = (date_end - datetime.now().date()).days
            msg = (f"üìÑ –õ—ñ—Ü–µ–Ω–∑—ñ—è:\n"
                   f"–ü–æ—á–∞—Ç–æ–∫: {date_start.strftime('%d.%m.%Y')}\n"
                   f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {date_end.strftime('%d.%m.%Y')}\n"
                   f"‚è≥ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {days_left} –¥–Ω—ñ–≤")
            buttons = [[InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –¥–∞—Ç–∏", callback_data="update_dates")]]
            reply_markup = InlineKeyboardMarkup(buttons)
            await update.message.reply_text(msg, reply_markup=reply_markup)
            user_states.pop(chat_id, None)
        else:
            state["step"] = "enter_date_start"
            await update.message.reply_text("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É –ª—ñ—Ü–µ–Ω–∑—ñ—ó (–î–î.–ú–ú.–†–†–†–†):")

    elif state["step"] == "enter_date_start":
        try:
            datetime.strptime(text, "%d.%m.%Y")
            state["date_start"] = text
            state["step"] = "enter_date_end"
            await update.message.reply_text("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –ª—ñ—Ü–µ–Ω–∑—ñ—ó (–î–î.–ú–ú.–†–†–†–†):")
        except:
            await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –î–î.–ú–ú.–†–†–†–†")

    elif state["step"] == "enter_date_end":
        try:
            start = datetime.strptime(state["date_start"], "%d.%m.%Y").date()
            end = datetime.strptime(text, "%d.%m.%Y").date()
            key = f"{state['group']}_{state['store_id']}_{state['license_type']}"
            await save_license(pool, key, start, end)
            await update.message.reply_text("‚úÖ –î–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!", reply_markup=ReplyKeyboardRemove())
            user_states.pop(chat_id, None)
        except:
            await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –î–î.–ú–ú.–†–†–†–†")

# === Callback Handler ===

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id
    user_states[chat_id] = {"step": "enter_date_start"}
    await query.message.reply_text("üìÖ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É –ª—ñ—Ü–µ–Ω–∑—ñ—ó (–î–î.–ú–ú.–†–†–†–†):")

# === –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ ===

async def main():
    app = Application.builder().token(BOT_TOKEN).build()
    pool = await get_pool()
    app.bot_data["pool"] = pool

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_callback))

    scheduler = AsyncIOScheduler()
    scheduler.start()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
